#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: Deploy

on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  VERSION: "3.0.6"
  QT_VERSION_LINUX: 6.8.1
  QT_VERSION_MACOS: 6.8.1
  QT_VERSION_WINDOWS: 6.8.1
  EXECUTABLE: "Serial-Studio"
  APPLICATION: "Serial Studio"
  UNIXNAME: "serial-studio"
  QML_DIR: "../../app/qml"
  PUBLISHER: "Alex Spataru"
  DESCRIPTION: "Multi-purpose serial data visualization & processing program"
  QT_MODULES: qt3d qtgraphs qtquick3d qtlocation qtdatavis3d qtserialport qtshadertools qtpositioning qtconnectivity
    
#-------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#-------------------------------------------------------------------------------

jobs:
  #
  # Linux build
  #
  build-linux-x86_64:
    runs-on: ubuntu-22.04
    name: 'üêß Linux (x86_64)'
    steps:
    - name: 'üß∞ Checkout'
      uses: actions/checkout@v4
      
    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{env.QT_VERSION_LINUX}}
        modules: ${{env.QT_MODULES}}
        cache: true
        install-deps: 'true'

    - name: '‚öôÔ∏è Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        libcups2-dev \
        libgl1-mesa-dev \
        libxkbcommon-x11-0 \
        libxcb-icccm4 \
        libxcb-image0 \
        libxcb-keysyms1 \
        libxcb-render-util0 \
        libxcb-xinerama0 \
        libzstd-dev \
        libxcb-image0-dev \
        libxcb-util0-dev \
        libxcb-cursor-dev \
        libssl-dev \
        libudev-dev \
        rpm \
        libfuse2 \
        fakeroot
        
    - name: '‚öôÔ∏è Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: '‚öôÔ∏è Install Intel Compiler'
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: intel
        version: 2024.1

    - name: 'üöß Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DCMAKE_CXX_COMPILER=icpx -DCMAKE_C_COMPILER=icx -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release

    - name: 'üöß Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16

    - name: 'üì¶ Create AppImage'
      run: |
        cd "build/app"
        wget https://github.com/dantti/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/dantti/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
        
        export QML_SOURCES_PATHS="${{env.QML_DIR}}"
        export QMAKE=/home/runner/work/${{env.EXECUTABLE}}/Qt/${{env.QT_VERSION_LINUX}}/gcc_64/bin/qmake
        export PATH=/home/runner/work/${{env.EXECUTABLE}}/Qt/${{env.QT_VERSION_LINUX}}/gcc_64/libexec:$PATH
        
        ./linuxdeploy-x86_64.AppImage --appdir AppDir -e ${{env.UNIXNAME}} -i ../../app/deploy/linux/${{env.UNIXNAME}}.svg -d ../../app/deploy/linux/${{env.UNIXNAME}}.desktop --plugin qt --output appimage
        
        rm linuxdeploy-x86_64.AppImage
        rm linuxdeploy-plugin-qt-x86_64.AppImage
        
        mv *.AppImage ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage

    - name: 'üì¶ Create Native Packages'
      run: |
        cd "build/app"

        export LDNP_DESCRIPTION="${{env.DESCRIPTION}}"
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-native_packages/releases/download/continuous/linuxdeploy-plugin-native_packages-x86_64.AppImage
        chmod +x linuxdeploy-plugin-native_packages-x86_64.AppImage
        
        fakeroot ./linuxdeploy-plugin-native_packages-x86_64.AppImage --appdir AppDir --build deb
        fakeroot ./linuxdeploy-plugin-native_packages-x86_64.AppImage --appdir AppDir --build rpm
        
        rm -rf AppDir
        rm linuxdeploy-plugin-native_packages-x86_64.AppImage
        
        mv *.deb ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb
        mv *.rpm ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm
          
    - name: 'üì§ Upload artifact: AppImage'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage

    - name: 'üì§ Upload artifact: Debian Package'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb

    - name: 'üì§ Upload artifact: RPM Package'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm

  #
  # macOS build
  #
  build-mac-universal:
    runs-on: macos-latest
    name: 'üçé macOS (Universal)'
    steps:
    - name: 'üß∞ Checkout'
      uses: actions/checkout@v4

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{env.QT_VERSION_MACOS}}
        modules: ${{env.QT_MODULES}}
        arch: clang_64
        cache: 'true'

    - name: '‚öôÔ∏è Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: '‚öôÔ∏è Install Node'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 'üöß Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

    - name: 'üöß Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16

    - name: 'üì¶ Package application'
      run: |
        cd build
        cpack --verbose

    - name: 'ü™™ Import Certificates'
      uses: alex-spataru/import-codesign-certs@v4
      with:
        p12-file-base64: ${{secrets.APPLE_CERTIFICATES_P12}}
        p12-password: ${{secrets.APPLE_CERTIFICATES_P12_PASSWORD}}

    - name: 'üíø Mount DMG and copy application'
      run: |
        VOLUME=$(yes | hdiutil attach ./build/*.dmg -nobrowse | grep "Volumes" | awk '{print $3}')
        cp -a "$VOLUME/${{env.EXECUTABLE}}.app" "${{env.APPLICATION}}.app"
        hdiutil detach "$VOLUME"

    - name: '‚úçüèª Sign Application'
      run: codesign --force --deep --options runtime --sign "${{secrets.APPLE_APPID_TEAM_ID}}" "${{env.APPLICATION}}.app"
        
    - name: 'üíΩ Create nice DMG'
      run: |
        npm install --global create-dmg
        rm LICENSE.md
        create-dmg "${{env.APPLICATION}}.app" --dmg-title="${{env.APPLICATION}}"
        mv "${{env.APPLICATION}} ${{env.VERSION}}.dmg" "${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg"

    - name: 'üìã Notarize'
      uses: wpilibsuite/xcode-notarize@v3
      with:
        product-path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg
        appstore-connect-username: ${{secrets.APPLE_NOTARIZATION_USERNAME}}
        appstore-connect-teamid: ${{secrets.APPLE_NOTARIZATION_TEAMID}}
        appstore-connect-password: ${{secrets.APPLE_NOTARIZATION_PASSWORD}}

    - name: 'üìå Staple'
      uses: BoundfoxStudios/action-xcode-staple@v1
      with:
        product-path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg

    - name: 'üì§ Upload artifact: DMG'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg

  #
  # Windows build
  #
  build-windows-x86_64:
    runs-on: windows-latest
    name: 'üßä Windows (x86_64)'
    steps:
    - run: git config --global core.autocrlf input
    - name: 'üß∞ Checkout'
      uses: actions/checkout@v4

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{env.QT_VERSION_WINDOWS}}
        modules: ${{env.QT_MODULES}}
        cache: 'true'
        arch: win64_msvc2022_64
      
    - name: '‚öôÔ∏è Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: 'üõ† Setup MSVC Development Environment'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64
        
    - name: 'üöß Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release

    - name: 'üöß Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16
        
    - name: '‚öôÔ∏è Add msbuild to PATH'
      uses: microsoft/setup-msbuild@v2
      
    - name: '‚öôÔ∏è Install WiX'
      run: dotnet tool install --global wix
        
    - name: 'üì¶ Package application'
      run: |
        cd build
        cpack --verbose
        mv *.msi ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi
        mv ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi ../
        
    - name: 'üì§ Upload artifact: MSI installer'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi

  # Upload continuous build
  upload:
      name: 'üóÇ Create release and upload artifacts'
      needs:
        - build-mac-universal
        - build-windows-x86_64
        - build-linux-x86_64
      runs-on: ubuntu-latest
      steps:
      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v4
      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR
      - name: 'üöÄ Create release and upload artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            sudo apt-get update
            sudo apt-get install libfuse2
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi

